
Emerald v1
-------------------------------------------------------------------------------
- Se ha unificado las memorias de las prácticas anteriores (entrega acumulativa).
- Corrección de erratas.

Léxico
	- Añadidos los tokens NEW y ARRAY.
	- Se ha modificado el token ID_CONSTANT. Antes se forzaba que todas las letras del identificador fueran mayúsculas. Ahora sólo se fuerza que lo sea el primer caracter.

Sintáctico
	- Se ha añadido tratamiento de errores (derivación con el token "error" y mensaje de error) en los siguientes no terminales.
		- program
		- method_definition
		- class_definition
		- method_call
		- block_call
		- loop
		- else_part
		- if_construction
		- assignment
		- expression

	- No terminal "method_call"
		- Añadida la posibilidad de invocar un método sin argumentos empleando únicamente su identificador (sin paréntesis vacíos).
	- No terminal "arguments"
		- Añadida la posibilidad de expresar la lista de argumentos entre paréntesis.
	- No terminal "method_call_argument"
		- Ahora se permite que un argumento sea una expresión o una string.
	- No terminal "more_arguments"
		- Solucionado un error por el que se entraba en un bucle infinito.
	- No terminal "block_call"
		- Solucionado un error por el que permitiamos la llamada a un bloque con más de un argumento (en Emerald sólo permitimos pasar bloques de un sólo argumento al método "each").
	- Sustituido no terminal "condition" por "expression" (afecta a bucles y estructuras if).
	- Sustituido no terminal "relator" por "relational_operator".
	- No terminal "assignment"
		- Se ha simplificado su definición mediante la inclusión de los no terminales auxiliares "left_side", "attribute" y "right_side".
	- No terminal "expression"
		- Añadido tratamiento de errores (derivación con el token "error").

	- Se han añadido los no terminales "content_vector", "code", "method_code" y "sentences".
	- Añadido sintaxis de strings compuestas.
